# -*- coding: utf-8 -*-
"""yeast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CZz8T0Jbr2dMxQmzdQB2wuZMv6o6GKJS
"""

import pandas
import numpy as np
# matplotlib inline
from sklearn.preprocessing import LabelEncoder
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_score

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/yeast/yeast.data"
names = ['Sequence Name','mcg', 'gvh', 'alm', 'mit', 'erl','pox','vac','nuc','class']
dataset = pandas.read_csv(url, names=names, delim_whitespace=True)

print(dataset.shape)

print(dataset.head(10))

#descriptions
print(dataset.describe())
#class distribution
print(dataset.groupby('class').size())

dataset.plot(kind='box', subplots=True,  sharex=False, sharey=False)
plt.show()

dataset.hist()
plt.show()

dataset['class'].value_counts().plot.bar()

print('Proportion of the classes:')
print(dataset['class'].value_counts() / len(dataset))

array = dataset.values
X = array[:,1:9]
Y = array[:,9]
validation_size = 0.025
seed = 7
#data division and mixing
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)
print (X_train.shape, X_validation.shape, Y_train.shape, Y_validation.shape)

seed = 7

models = []
models.append(('CART', DecisionTreeClassifier()))
models.append(('SVM', SVC()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('GNB', GaussianNB()))

results = []
names = []
i=0
for name, model in models:
      
	kfold = model_selection.KFold(n_splits=30, random_state=seed)
	cv_results = model_selection.cross_val_score(model, X_train, Y_train, cv = kfold, scoring = 'accuracy')
	results.append(cv_results)
	names.append(name)
	print ("%s: %f (%f)" % (name, cv_results.mean(), cv_results.std()))

fig = plt.figure()
fig.suptitle('Algorithm Comparison')
ax = fig.add_subplot(111)
plt.boxplot(results)
ax.set_xticklabels(names)
plt.show()

knn = KNeighborsClassifier()
knn.fit(X_train, Y_train)
predictions = knn.predict(X_validation)

print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))

svm = SVC()
svm.fit(X_train, Y_train)
predictions = svm.predict(X_validation)

print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))

cart = DecisionTreeClassifier() 
cart.fit(X_train, Y_train.ravel()) 
predictions = cart.predict(X_validation) 

print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))

gnb = GaussianNB()
gnb.partial_fit(X_train, Y_train, np.unique(Y_train))
predictions = gnb.predict(X_validation)

print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))

from imblearn.over_sampling import SMOTE
sm = SMOTE(kind='regular',k_neighbors=4)

X_train_new, Y_train_new = sm.fit_sample(X_train, Y_train)

# observe that data has been balanced
pandas.Series(Y_train_new).value_counts().plot.bar()

knn = KNeighborsClassifier()
knn.fit(X_train_new, Y_train_new)
predictions_sm = knn.predict(X_validation)

print(accuracy_score(Y_validation, predictions_sm))
print(confusion_matrix(Y_validation, predictions_sm))
print(classification_report(Y_validation, predictions_sm))

svm = SVC()
svm.fit(X_train_new, Y_train_new)
predictions_sm = svm.predict(X_validation)

print(accuracy_score(Y_validation, predictions_sm))
print(confusion_matrix(Y_validation, predictions_sm))
print(classification_report(Y_validation, predictions_sm))

cart = DecisionTreeClassifier() 
cart.fit(X_train_new, Y_train_new) 
predictions_sm = cart.predict(X_validation) 

print(accuracy_score(Y_validation, predictions_sm))
print(confusion_matrix(Y_validation, predictions_sm))
print(classification_report(Y_validation, predictions_sm))

gnb = GaussianNB()
gnb.partial_fit(X_train_new, Y_train_new, np.unique(Y_train_new))
predictions_sm = gnb.predict(X_validation)

print(accuracy_score(Y_validation, predictions_sm))
print(confusion_matrix(Y_validation, predictions_sm))
print(classification_report(Y_validation, predictions_sm))